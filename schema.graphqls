# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    subscription: Subscription
}

type Candle {
    close: BigDecimal!
    high: BigDecimal!
    id: ID!
    lastBlock: Int!
    low: BigDecimal!
    open: BigDecimal!
    pair: String!
    period: Int!
    time: Int!
    token0: Bytes!
    token0TotalAmount: BigInt!
    token1: Bytes!
    token1TotalAmount: BigInt!
}

type Pair {
    id: ID!
    token0: Bytes!
    token1: Bytes!
}

type Query {
    "Access to subgraph metadata"
    _meta(block: Block_height): _Meta_
    candle(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!
    ): Candle
    candles(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: Candle_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        where: Candle_filter
    ): [Candle!]!
    pair(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!
    ): Pair
    pairs(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: Pair_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        where: Pair_filter
    ): [Pair!]!
}

type Subscription {
    "Access to subgraph metadata"
    _meta(block: Block_height): _Meta_
    candle(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!
    ): Candle
    candles(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: Candle_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        where: Candle_filter
    ): [Candle!]!
    pair(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!
    ): Pair
    pairs(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: Pair_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        where: Pair_filter
    ): [Pair!]!
}

type _Block_ {
    "The hash of the block"
    hash: Bytes
    "The block number"
    number: Int!
}

"The type for the top-level _meta field"
type _Meta_ {
    """

    Information about a specific subgraph block. The hash of the block
    will be null if the _meta field has a block constraint that asks for
    a block number. It will be filled if the _meta field has no block constraint
    and therefore asks for the latest  block
    """
    block: _Block_!
    "The deployment ID"
    deployment: String!
    "If `true`, the subgraph encountered indexing errors at some past block"
    hasIndexingErrors: Boolean!
}

enum Candle_orderBy {
    close
    high
    id
    lastBlock
    low
    open
    pair
    period
    time
    token0
    token0TotalAmount
    token1
    token1TotalAmount
}

enum OrderDirection {
    asc
    desc
}

enum Pair_orderBy {
    id
    token0
    token1
}

enum _SubgraphErrorPolicy_ {
    "Data will be returned even if the subgraph has indexing errors"
    allow
    "If the subgraph has indexing errors, data will be omitted. The default."
    deny
}

input Block_height {
    hash: Bytes
    number: Int
}

input Candle_filter {
    close: BigDecimal
    close_gt: BigDecimal
    close_gte: BigDecimal
    close_in: [BigDecimal!]
    close_lt: BigDecimal
    close_lte: BigDecimal
    close_not: BigDecimal
    close_not_in: [BigDecimal!]
    high: BigDecimal
    high_gt: BigDecimal
    high_gte: BigDecimal
    high_in: [BigDecimal!]
    high_lt: BigDecimal
    high_lte: BigDecimal
    high_not: BigDecimal
    high_not_in: [BigDecimal!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    lastBlock: Int
    lastBlock_gt: Int
    lastBlock_gte: Int
    lastBlock_in: [Int!]
    lastBlock_lt: Int
    lastBlock_lte: Int
    lastBlock_not: Int
    lastBlock_not_in: [Int!]
    low: BigDecimal
    low_gt: BigDecimal
    low_gte: BigDecimal
    low_in: [BigDecimal!]
    low_lt: BigDecimal
    low_lte: BigDecimal
    low_not: BigDecimal
    low_not_in: [BigDecimal!]
    open: BigDecimal
    open_gt: BigDecimal
    open_gte: BigDecimal
    open_in: [BigDecimal!]
    open_lt: BigDecimal
    open_lte: BigDecimal
    open_not: BigDecimal
    open_not_in: [BigDecimal!]
    pair: String
    pair_contains: String
    pair_ends_with: String
    pair_gt: String
    pair_gte: String
    pair_in: [String!]
    pair_lt: String
    pair_lte: String
    pair_not: String
    pair_not_contains: String
    pair_not_ends_with: String
    pair_not_in: [String!]
    pair_not_starts_with: String
    pair_starts_with: String
    period: Int
    period_gt: Int
    period_gte: Int
    period_in: [Int!]
    period_lt: Int
    period_lte: Int
    period_not: Int
    period_not_in: [Int!]
    time: Int
    time_gt: Int
    time_gte: Int
    time_in: [Int!]
    time_lt: Int
    time_lte: Int
    time_not: Int
    time_not_in: [Int!]
    token0: Bytes
    token0TotalAmount: BigInt
    token0TotalAmount_gt: BigInt
    token0TotalAmount_gte: BigInt
    token0TotalAmount_in: [BigInt!]
    token0TotalAmount_lt: BigInt
    token0TotalAmount_lte: BigInt
    token0TotalAmount_not: BigInt
    token0TotalAmount_not_in: [BigInt!]
    token0_contains: Bytes
    token0_in: [Bytes!]
    token0_not: Bytes
    token0_not_contains: Bytes
    token0_not_in: [Bytes!]
    token1: Bytes
    token1TotalAmount: BigInt
    token1TotalAmount_gt: BigInt
    token1TotalAmount_gte: BigInt
    token1TotalAmount_in: [BigInt!]
    token1TotalAmount_lt: BigInt
    token1TotalAmount_lte: BigInt
    token1TotalAmount_not: BigInt
    token1TotalAmount_not_in: [BigInt!]
    token1_contains: Bytes
    token1_in: [Bytes!]
    token1_not: Bytes
    token1_not_contains: Bytes
    token1_not_in: [Bytes!]
}

input Pair_filter {
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    token0: Bytes
    token0_contains: Bytes
    token0_in: [Bytes!]
    token0_not: Bytes
    token0_not_contains: Bytes
    token0_not_in: [Bytes!]
    token1: Bytes
    token1_contains: Bytes
    token1_in: [Bytes!]
    token1_not: Bytes
    token1_not_contains: Bytes
    token1_not_in: [Bytes!]
}


scalar BigDecimal

scalar BigInt

scalar Bytes
